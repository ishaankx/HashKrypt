name: CI-CD Pipeline

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  push:
    branches: [dev, main]
  pull_request:
    branches: [dev, main]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # ---------- CLIENT ----------
      - name: Setup Node.js (client)
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: ./client/package-lock.json

      - name: Install client deps
        working-directory: ./client
        run: npm ci

      - name: Build client
        working-directory: ./client
        run: npm run build

      - name: Run client tests
        working-directory: ./client
        run: npm test --if-present

      # ---------- SERVER ----------
      - name: Setup Node.js (server)
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: ./server/package-lock.json

      - name: Install server deps
        working-directory: ./server
        run: npm ci

      - name: Build server
        working-directory: ./server
        run: npm run build

      - name: Run server tests
        working-directory: ./server
        run: npm test --if-present

      # ---------- OPTIONAL LINT ----------
      - name: Run linter (client)
        working-directory: ./client
        run: npm run lint --if-present

      - name: Run linter (server)
        working-directory: ./server
        run: npm run lint --if-present

  # ---------- DEPLOY CLIENT TO VERCEL ----------
  deploy-vercel:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --cwd=./client --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build project artifacts
        run: vercel build --prod --cwd=./client --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        run: vercel deploy --prebuilt --prod --yes --cwd=./client --token=${{ secrets.VERCEL_TOKEN }}

  # ---------- DEPLOY SERVER TO RAILWAY ----------
  ddeploy-railway:
    needs: build-and-test
    runs-on: ubuntu-latest
    container: ghcr.io/railwayapp/cli:latest
    env:
      SVC_ID: ${{secrets.RAILWAY_SERVICE_ID}}
      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }} # Project token, not just API key
    steps:
      - uses: actions/checkout@v4
      - run: railway up ./server --service=${{ env.SVC_ID }} --project-id=${{ secrets.RAILWAY_PROJECT_ID }}
